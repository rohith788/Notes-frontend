{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType } from \"../parser/index.js\";\nimport { OperationData } from \"./OperationData.js\";\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runLazy = false;\n    _this.previous = Object.create(null);\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.getQueryResult = function () {\n      var result = _this.observableQueryFields();\n\n      var options = _this.getOptions();\n\n      if (options.skip) {\n        result = __assign(__assign({}, result), {\n          data: undefined,\n          error: undefined,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n          called: true\n        });\n      } else if (_this.currentObservable) {\n        var currentResult = _this.currentObservable.getCurrentResult();\n\n        var data = currentResult.data,\n            loading = currentResult.loading,\n            partial = currentResult.partial,\n            networkStatus = currentResult.networkStatus,\n            errors = currentResult.errors;\n        var error = currentResult.error;\n\n        if (errors && errors.length > 0) {\n          error = new ApolloError({\n            graphQLErrors: errors\n          });\n        }\n\n        result = __assign(__assign({}, result), {\n          data: data,\n          loading: loading,\n          networkStatus: networkStatus,\n          error: error,\n          called: true\n        });\n\n        if (loading) {} else if (error) {\n          Object.assign(result, {\n            data: (_this.currentObservable.getLastResult() || {}).data\n          });\n        } else {\n          var fetchPolicy = _this.currentObservable.options.fetchPolicy;\n          var partialRefetch = options.partialRefetch;\n\n          if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n              loading: true,\n              networkStatus: NetworkStatus.loading\n            });\n            result.refetch();\n            return result;\n          }\n        }\n      }\n\n      result.client = _this.client;\n\n      _this.setOptions(options, true);\n\n      var previousResult = _this.previous.result;\n      _this.previous.loading = previousResult && previousResult.loading || false;\n      result.previousData = previousResult && (previousResult.data || previousResult.previousData);\n      _this.previous.result = result;\n      _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      var _a;\n\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var _this = this;\n\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(function (resolve) {\n      return _this.startQuerySubscription(resolve);\n    });\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteResult = function () {\n    var result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  ;\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var _a = this.getOptions(),\n        ssr = _a.ssr,\n        skip = _a.skip;\n\n    var ssrDisabled = ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (this.ssrInitiated()) {\n      if (skip) {\n        result = this.getQueryResult();\n      } else {\n        result = this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;\n      }\n\n      ;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previous.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    if (this.getOptions().skip) return;\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previous.observableQueryOptions)) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function (onNewData) {\n    var _this = this;\n\n    if (onNewData === void 0) {\n      onNewData = this.onNewData;\n    }\n\n    if (this.currentSubscription || this.getOptions().skip) return;\n    this.currentSubscription = this.currentObservable.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previous.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previous.result;\n\n        if (previousResult && previousResult.loading || !equal(_error, _this.previous.error)) {\n          _this.previous.error = _error;\n          onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var currentObservable = this.currentObservable;\n\n    if (currentObservable) {\n      var lastError = currentObservable.getLastError();\n      var lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError: lastError,\n        lastResult: lastResult\n      });\n    }\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    if (!this.currentObservable || !this.previous.result) return;\n    var _a = this.previous.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError,\n          skip = _b.skip;\n\n      if (this.previousOptions && !this.previous.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  };\n\n  QueryData.prototype.removeObservable = function (andDelete) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var _a;\n\n    return {\n      variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nexport { QueryData };","map":null,"metadata":{},"sourceType":"module"}