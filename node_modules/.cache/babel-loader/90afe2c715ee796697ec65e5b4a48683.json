{"ast":null,"code":"import _slicedToArray from \"/home/rohith/Documents/Projects/keeps-backend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/rohith/Documents/Projects/keeps-backend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/rohith/Documents/Projects/keeps-backend/client/src/context/auth.js\";\nimport React, { useReducer, createContext } from \"react\"; // import jwtDecode from \"jwt-decode\";\n\nvar initialState = {\n  user: null\n}; // if (localStorage.getItem(\"jwtToken\")) {\n//   const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\n//   if (decodedToken.exp * 1000 < Date.now()) {\n//     localStorage.removeItem(\"jwtToken\");\n//   } else {\n//     initialState.user = decodedToken;\n//   }\n// }\n\nvar AuthContext = createContext({\n  user: null,\n  login: function login(userData) {},\n  logout: function logout() {}\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN\":\n      return _objectSpread({}, state, {\n        user: action.payload\n      });\n\n    case \"LOGOUT\":\n      return _objectSpread({}, state, {\n        user: null\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  var _useReducer = useReducer(authReducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  function login(userData) {\n    // localStorage.setItem(\"jwtToken\", userData.token);\n    dispatch({\n      type: \"LOGIN\",\n      payload: userData\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem(\"jwtToken\");\n    dispatch({\n      type: \"LOGOUT\"\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, Object.assign({\n    value: {\n      user: state.user,\n      login: login,\n      logout: logout\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport { AuthContext, AuthProvider };","map":{"version":3,"sources":["/home/rohith/Documents/Projects/keeps-backend/client/src/context/auth.js"],"names":["React","useReducer","createContext","initialState","user","AuthContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","dispatch","localStorage","removeItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD,C,CACA;;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB,C,CAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,WAAW,GAAGH,aAAa,CAAC;AAChCE,EAAAA,IAAI,EAAE,IAD0B;AAEhCE,EAAAA,KAAK,EAAE,eAACC,QAAD,EAAc,CAAE,CAFS;AAGhCC,EAAAA,MAAM,EAAE,kBAAM,CAAE;AAHgB,CAAD,CAAjC;;AAMA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,+BACKF,KADL;AAEEN,QAAAA,IAAI,EAAEO,MAAM,CAACE;AAFf;;AAIF,SAAK,QAAL;AACE,+BACKH,KADL;AAEEN,QAAAA,IAAI,EAAE;AAFR;;AAIF;AACE,aAAOM,KAAP;AAZJ;AAcD;;AAED,SAASI,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,oBACDd,UAAU,CAACQ,WAAD,EAAcN,YAAd,CADT;AAAA;AAAA,MACpBO,KADoB;AAAA,MACbM,QADa;;AAG3B,WAASV,KAAT,CAAeC,QAAf,EAAyB;AACvB;AACAS,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAE,OADC;AAEPC,MAAAA,OAAO,EAAEN;AAFF,KAAD,CAAR;AAID;;AAED,WAASC,MAAT,GAAkB;AAChBS,IAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACAF,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD;;AAED,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAER,MAAAA,IAAI,EAAEM,KAAK,CAACN,IAAd;AAAoBE,MAAAA,KAAK,EAALA,KAApB;AAA2BE,MAAAA,MAAM,EAANA;AAA3B;AADT,KAEMO,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAMD;;AAED,SAASV,WAAT,EAAsBS,YAAtB","sourcesContent":["import React, { useReducer, createContext } from \"react\";\n// import jwtDecode from \"jwt-decode\";\n\nconst initialState = {\n  user: null,\n};\n\n// if (localStorage.getItem(\"jwtToken\")) {\n//   const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\n\n//   if (decodedToken.exp * 1000 < Date.now()) {\n//     localStorage.removeItem(\"jwtToken\");\n//   } else {\n//     initialState.user = decodedToken;\n//   }\n// }\n\nconst AuthContext = createContext({\n  user: null,\n  login: (userData) => {},\n  logout: () => {},\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: null,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    // localStorage.setItem(\"jwtToken\", userData.token);\n    dispatch({\n      type: \"LOGIN\",\n      payload: userData,\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem(\"jwtToken\");\n    dispatch({ type: \"LOGOUT\" });\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ user: state.user, login, logout }}\n      {...props}\n    />\n  );\n}\n\nexport { AuthContext, AuthProvider };\n"]},"metadata":{},"sourceType":"module"}